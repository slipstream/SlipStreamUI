(ns slipstream.ui.utils
  (:use [ring.adapter.jetty :only [run-jetty]]
        [ring.util.response :only [response file-response]]
        [ring.middleware.reload :only [wrap-reload]]
        [ring.middleware.file :only [wrap-file]]
        [ring.middleware.stacktrace :only [wrap-stacktrace]]
        [slipstream.ui.test-config :as config])
  (:require [superstring.core :as s]
            [clojure.walk :as w]
            [net.cgrand.enlive-html :as html]))

;; Taken from https://github.com/swannodette/enlive-tutorial/

(def webdir
  (config/value :webdir "src/slipstream/ui/views/"))

(defn render [t]
  (apply str t))

(defn render-snippet [s]
  (apply str (html/emit* s)))

(def render-to-response
  (comp response render))

(defn page-not-found [req]
  {:status 404
   :headers {"Content-type" "text/html"}
   :body "Page Not Found"})

(defn render-request [afn & args]
  (fn [req] (render-to-response (apply afn args))))

(defn serve-file [filename]
  (file-response
   {:root webdir
    :index-files? true
    :html-files? true}))

(defn run-server* [app & {:keys [port] :or {port 8082}}]
  (let [nses (if-let [m (meta app)]
               [(-> (:ns (meta app)) str symbol)]
               [])]
    (println "run-server*" nses)
    (run-jetty
      (-> app
        (wrap-file webdir)
        (wrap-reload nses)
        (wrap-stacktrace))
      {:port port :join? false})))

(defmacro run-server [app & opts]
  `(run-server* (var ~app) ~@opts))

(defmulti parse-int type)
(defmethod parse-int java.lang.Integer [n] n)
(defmethod parse-int java.lang.String [s] (Integer/parseInt s))

(defmacro maybe-substitute
  ([expr] `(if-let [x# ~expr] (html/substitute x#) identity))
  ([expr & exprs] `(maybe-substitute (or ~expr ~@exprs))))

(defmacro maybe-content
  ([expr] `(if-let [x# ~expr] (html/content x#) identity))
  ([expr & exprs] `(maybe-content (or ~expr ~@exprs))))

(defn pluralize [astr n]
  (if (= n 1)
    (str astr)
    (str astr "s")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defn- as-set-of-words
  [^String classes]
  (when classes
    (set (s/split classes #"\s"))))

(defn- settify-unsorted-attributes
  [enlive-nodes]
  (w/postwalk #(if (map? %)
                 (-> %
                     (update-in [:class] as-set-of-words))
                 %)
              enlive-nodes))

(defn as-comparable-structure
  "The exact HTML string generated by enlive is not deterministic because CSS
  class names are not sorted."
  [^String html-string]
  (-> html-string
      html/html-snippet
      settify-unsorted-attributes))

(defmacro expect-html
  "It's a macro so that the reported failing line is the correct one."
  [^String expected ^String actual]
  `(~(symbol "expect")
    (as-comparable-structure ~expected)
    (as-comparable-structure ~actual)))
